#!/bin/bash

alias w:= watch
alias b:= build
alias pack := package

APP_NAME := "audify"
APP_VERSION:="0.1.0"
MINIMUM_STABLE_RUST_VERSION :="1.83.0"
BINARIES_PATH := "bin"
EXPORT_PATH := "packages"
SUPPORTED_PLATFORM :="android"

LAME_PATH := "src-tauri/sidecar/lame/bin/lame"
SIDECAR_PATH :="src-tauri/sidecar/binaries"



[working-directory:'../']
@build-lame:
    @just build-lame

[doc('build the lame project for the target platform')]
@prebuild:
    npm run build 
    just build-lame
    @cp "src-tauri/sidecar/lame/bin/lame" "{{SIDECAR_PATH}}/lame-$(rustc -Vv | grep host | cut -f2 -d' ')"

@watch target:
    #!/usr/bin/env sh
    if [ {{target}} = "android" ]; then \
        #!/usr/bin/env sh

        # Android SDK & NDK setup
        export JAVA_HOME="/Applications/Android Studio.app/Contents/jbr/Contents/Home"
        export ANDROID_HOME="$HOME/Library/Android/sdk"
        export NDK_VERSION=$(ls -1 "$ANDROID_HOME/ndk" | tail -n 1)
        export NDK_HOME="$ANDROID_HOME/ndk/$NDK_VERSION"

        # Detect the correct platform (darwin-x86_64 or darwin-arm64)
        PLATFORM=$(ls "$NDK_HOME/toolchains/llvm/prebuilt/" | head -n 1)

        # Toolchain and sysroot
        export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/$PLATFORM"
        export PATH="$TOOLCHAIN/bin:$PATH"

        # Target and Clang setup
        export API_LEVEL=30
        export TARGET_TRIPLE="aarch64-linux-android"
        export CC_aarch64_linux_android="${TARGET_TRIPLE}${API_LEVEL}-clang"
        export SYSROOT="$TOOLCHAIN/sysroot"

        # Bindgen support for sysroot
        export BINDGEN_EXTRA_CLANG_ARGS="--sysroot=$SYSROOT -isystem $SYSROOT/usr/include -isystem $SYSROOT/usr/include/$TARGET_TRIPLE -D__ANDROID_API__=$API_LEVEL"

        # Optional debug echo
        echo "NDK version: $NDK_VERSION"
        echo "Using toolchain: $TOOLCHAIN"
        echo "Using compiler: $(which $CC_aarch64_linux_android)"

        export ORT_LIB_LOCATION=../onnxruntime/build/Android/Debug

        export ESPEAK_BUILD_SHARED_LIBS=true
        npm run tauri android dev 
    elif [ {{target}} = "ios" ]; then \
        npm tauri ios dev 
    else
        cargo tauri dev
    fi

[doc('build the application ')]
[group('watch')]
build target:
    #!/usr/bin/env sh
    export ANDROID_HOME="$HOME/Library/Android/sdk"
    export NDK_HOME="$ANDROID_HOME/ndk/$(ls -1 $ANDROID_HOME/ndk)"
    export ENV="production"
    # export BASE_URL=""
    if [ {{target}} = "all" ]; then 
        for platform in {{SUPPORTED_PLATFORM}}
        do
            echo ">>>>>>>>>> Building $platform \n"
            just build $platform
        echo "Build completed"
        done 
    elif [ {{target}} = "android" ]; then
        cargo tauri android build --apk
    elif [ {{target}} = "ios" ]; then 
        cargo tauri ios build --aab
    else
        cargo tauri build 
    fi


[doc("Export binaries into $PWD/bin")]
ship target: 
    #!/usr/bin/env sh
    mkdir -p bin
    if [ {{target}} = "all" ]; then 
        for platform in {{SUPPORTED_PLATFORM}}
        do
            just export $platform
        echo "Export completed"
        done 
    elif [ {{target}} = "android" ]; then
        cp tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk {{BINARIES_PATH}}/{{APP_NAME}}.apk
    elif [ {{target}} = "ios" ]; then 
        cp tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab {{BINARIES_PATH}}/{{APP_NAME}}.aab
    elif [ {{target}} = "macos" ]; then
        cp tauri/target/release/bundle/dmg/filesync_{{APP_VERSION}}_aarch64.dmg {{BINARIES_PATH}}/{{APP_NAME}}.dmg
    else 
        echo "Unspported target"
        exit 1;
    fi


[doc("build and export all")]
package:
    #!/bin/bash
    just build all
    just export all
    echo date > release-date.text
    cp "{{BINARIES_PATH}}/*" "{{EXPORT_PATH}}/*"

